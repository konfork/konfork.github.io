{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Konfork","text":"<p>Declarative validations for Kotlin</p>"},{"location":"#validators","title":"Validators","text":"<p>Konfork allows you to easily build and maintain validators:</p> <pre><code>val validateUser = Validator&lt;UserProfile&gt; {\n    UserProfile::fullName {\n        minLength(2)\n        maxLength(100)\n    }\n\n    UserProfile::age ifPresent {\n        minimum(0)\n        maximum(150)\n    }\n}\n\nval result = validateUser(someUser)\n</code></pre>"},{"location":"about/","title":"About","text":"<p>Konfork is a fork of Konform. While Konform is an excellent project there were some important features missing:</p> <ul> <li>Custom error types</li> <li>Validation context</li> <li>Validator builders like <code>lazy</code>, <code>eager</code> and <code>conditional</code></li> <li>Custom hints on <code>required</code></li> </ul> <p>Besides this, the design philosophy was to not add a series of default validations (e.g. <code>uuid()</code> or <code>email()</code>).</p> <p>This projects aim is to add these features and add many default validations, ready to be used.</p>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#validator","title":"Validator","text":""},{"location":"concepts/#validator-builder","title":"Validator Builder","text":""},{"location":"concepts/#constraint-builder","title":"Constraint Builder","text":"<pre><code>fun Specification&lt;Unit, String, String&gt;.sandyPlanet() =\n    addConstraint(\"must be a sandy planet\") {\n        it == \"Tatooine\" || it == \"Arrakis\"\n    }\n</code></pre>"},{"location":"getting-started/","title":"Getting started","text":"<p>Note that this is a newly forked project. Because of this I expect the API to be unstable the first couple of versions.</p>"},{"location":"getting-started/#setup","title":"Setup","text":"<p>For multiplatform projects:</p> <pre><code>kotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation(\"io.github.konfork:konfork-core:0.0.4\")\n            }\n        }\n    }\n}\n</code></pre> <p>For jvm-only projects add:</p> <pre><code>dependencies {\n    implementation(\"io.github.konfork:konfork-core-jvm:0.0.4\")\n}\n</code></pre>"},{"location":"getting-started/#writing-your-first-validator","title":"Writing your first Validator","text":"<p>Most validators don't need any advanced features. </p> <p>Given a simple data class like</p> <pre><code>data class UserProfile(\n    val fullName: String,\n    val age: Int?\n)\n</code></pre> <p>A possible validator can be as simple as:</p> <pre><code>val validateUser = Validator&lt;UserProfile&gt; {\n    UserProfile::fullName {\n        minLength(2)\n        maxLength(100)\n    }\n\n    UserProfile::age ifPresent {\n        minimum(0)\n        maximum(150)\n    }\n}\n</code></pre>"},{"location":"getting-started/#using-a-validator","title":"Using a validator","text":"<p>To run the validator:</p> <pre><code>val invalidUser = UserProfile(\"A\", -1)\nval result = validateUser(invalidUser)\n// result holds two errors: \"must have at least 2 characters\" and \"must be at least '0'\"\n</code></pre> <p>The result can be used in several ways (see arrow module for pretty patterns):</p> <pre><code>when (result) {\n    is Valid -&gt; result.value // value holds the user\n    is Invalid -&gt; result.errors // Get a list of all errors\n}\n</code></pre>"}]}